plugins {
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "net.minecraftforge.gradle" version "[6.0,6.2)"
	id "org.spongepowered.mixin" version "0.7.+"
}

version = "${MinecraftVersion}-${ModVersion}"
group = "net.luis.xores"

base {
	archivesName = "XOres"
}

minecraft {
	mappings channel: "official", version: MinecraftVersion
	copyIdeResources = true
	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xores"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		server {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xores"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		gameTestServer {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xores"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		data {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			args "--mod", "xores", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "mixins.xores.refmap.json"
	config "xores.mixins.json"
	debug.export = true
}

sourceSets.main.resources {srcDir "src/generated/resources"}

dependencies {
	minecraft "net.minecraftforge:forge:${MinecraftVersion}-${ForgeVersion}"
	
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

def resourceTargets = ["META-INF/mods.toml"]
def replaceProperties = [
	MinecraftVersion: MinecraftVersion, MinecraftVersionRange: MinecraftVersionRange,
	ForgeVersion: ForgeVersion, ForgeVersionRange: ForgeVersionRange,
	ForgeLoaderRange: ForgeLoaderRange, ModVersion: ModVersion
]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put "project", project
	
	filesMatching(resourceTargets) {
		expand replaceProperties
	}
}

jar {
	manifest {
		attributes([
			"Specification-Title": "XOres",
			"Specification-Version": "${ModVersion}",
			"Implementation-Title": project.name,
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd HH:mm:ssZ")
		])
	}
}

jar.finalizedBy("reobfJar")

java {
	withSourcesJar()
}

artifacts {
	archives sourcesJar
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
			artifact sourcesJar
		}
	}
	
	repositories {
		maven {
			url uri("${projectDir}/maven/repositories")
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}
