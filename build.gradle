import java.nio.file.Files

plugins {
	id "eclipse"
	id "idea"
	id "maven-publish"
	id "net.minecraftforge.gradle" version "[6.0,6.2)"
	id "org.spongepowered.mixin" version "0.7.+"
}

minecraft {
	mappings channel: "official", version: MinecraftVersion
	copyIdeResources = true
	accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
	
	runs {
		client {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xores"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		server {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xores"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		gameTestServer {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "forge.enabledGameTestNamespaces", "xores"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		data {
			workingDirectory project.file("run")
			
			property "forge.logging.markers", "REGISTRIES"
			property "forge.logging.console.level", "debug"
			property "mixin.env.remapRefMap", "true"
			property "mixin.env.refMapRemappingFile", "${buildDir}/createSrgToMcp/output.srg"
			property "xores.data.include", "mod"
			
			args "--mod", "xores", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
			
			mods {
				examplemod {
					source sourceSets.main
				}
			}
		}
		
		dataPackRarer {
			parent runs.data
			
			property "xores.data.include", "rarer"
		}
		
		dataPackVeryRare {
			parent runs.data
			
			property "xores.data.include", "very_rare"
		}
	}
}

mixin {
	add sourceSets.main, "mixins.xores.refmap.json"
	config "xores.mixins.json"
	debug.export = true
}

sourceSets.main.resources {srcDir "src/generated/resources"}

dependencies {
	minecraft "net.minecraftforge:forge:${MinecraftVersion}-${ForgeVersion}"
	
	annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

java {
	withSourcesJar()
}

artifacts {
	archives sourcesJar
}

def username = ""
def password = ""
def creds = file("./../../credentials.properties")
if (creds.exists()) {
	def properties = new Properties()
	creds.withInputStream {properties.load(it)}
	username = properties.getProperty("username")
	password = properties.getProperty("password")
}

def ver = "${MinecraftVersion}-${ModVersion}"
tasks.register("renameArtifacts") {
	doLast {
		def jar = file("build/libs/${project.name}.jar")
		def sourcesJar = file("build/libs/${project.name}-sources.jar")
		if (Files.exists(jar.toPath())) {
			def folder = file("D:/Games/Forge/Uploaded/XOres/${MinecraftVersion}")
			if (!Files.exists(folder.toPath())) {
				Files.createDirectory(folder.toPath())
			}
			if (!Files.exists(folder.toPath().resolve("XOres-${ver}.jar"))) {
				Files.move(jar.toPath(), folder.toPath().resolve("XOres-${ver}.jar"))
				println "Moved '${jar}' to '${folder.toPath().resolve("XOres-${ver}.jar")}'"
			} else {
				Files.delete(jar.toPath())
				println "Deleted '${jar}'"
			}
		}
		if (Files.deleteIfExists(sourcesJar.toPath())) {
			println "Deleted '${sourcesJar}'"
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			groupId = "net.luis"
			artifactId = "XOres"
			version = ver
			artifact jar
			artifact sourcesJar
		}
	}
	repositories {
		if (!username.isBlank() && !password.isBlank()) {
			maven {
				url "https://maven.luis-st.net/forge/"
				credentials.username = username
				credentials.password = password
			}
		} else {
			System.err.println("No credentials provided. Publishing to maven.luis-st.net not possible.")
		}
	}
}

def resourceTargets = ["META-INF/mods.toml"]
def replaceProperties = [
	MinecraftVersion: MinecraftVersion, MinecraftVersionRange: MinecraftVersionRange,
	ForgeVersion: ForgeVersion, ForgeVersionRange: ForgeVersionRange,
	ForgeLoaderRange: ForgeLoaderRange, ModVersion: ModVersion
]
processResources {
	inputs.properties replaceProperties
	replaceProperties.put "project", project
	
	filesMatching(resourceTargets) {
		expand replaceProperties
	}
}

jar {
	outputs.upToDateWhen {false}
	manifest {
		attributes([
			"Specification-Title": "XOres",
			"Specification-Version": "${ModVersion}",
			"Implementation-Title": project.name,
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd HH:mm:ssZ")
		])
	}
	finalizedBy("reobfJar")
}

sourcesJar {
	outputs.upToDateWhen {false}
}

build.finalizedBy("renameArtifacts")
publish.finalizedBy("renameArtifacts")

tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"
}

sourceSets.each {
	def dir = layout.buildDirectory.dir("sourcesSets/${it.name}")
	it.output.resourcesDir = dir
	it.java.destinationDirectory = dir
}
